//**********************************************************//
                     IOT-M1_switch_HomeKit
//**********************************************************//

#include <Arduino.h>
#include <arduino_homekit_server.h>
#include "wifi_info.h"

#define LOG_D(fmt, ...)   printf_P(PSTR(fmt "\n") , ##__VA_ARGS__);

#define X1 27
#define Y1 13

#define X2 26
#define Y2 18

#define X3 25
#define Y3 19

#define X4 33
#define Y4 23

#define Buzzer 14

#define DEBUG_SW 0

int switch_ON_Flag1_previonus_I = 0;
int switch_ON_Flag2_previonus_I = 0;
int switch_ON_Flag3_previonus_I = 0;
int switch_ON_Flag4_previonus_I = 0;

void setup() {
	Serial.begin(115200);
	wifi_connect(); // in wifi_info.h
	//homekit_storage_reset(); // to remove the previous HomeKit pairing storage when you first run this new HomeKit example
	my_homekit_setup();
  pinMode(Buzzer, OUTPUT);
  digitalWrite(Buzzer, HIGH);
  delay(100);
  digitalWrite(Buzzer, LOW);
}

void loop() {
	my_homekit_loop();
	delay(10);
}

//==============================
// HomeKit setup and loop
//==============================

// access your HomeKit characteristics defined in my_accessory.c
extern "C" homekit_server_config_t config;
extern "C" homekit_characteristic_t cha_switch1_on;
extern "C" homekit_characteristic_t cha_switch2_on;
extern "C" homekit_characteristic_t cha_switch3_on;
extern "C" homekit_characteristic_t cha_switch4_on;

static uint32_t next_heap_millis = 0;

//Called when the switch value is changed by iOS Home APP
void cha_switch1_on_setter(const homekit_value_t value) {
	bool on = value.bool_value;
	cha_switch1_on.value.bool_value = on;	//sync the value
	LOG_D("Switch: %s", on ? "ON" : "OFF");
	digitalWrite(Y1, on ? HIGH : LOW);
}

//Called when the switch value is changed by iOS Home APP
void cha_switch2_on_setter(const homekit_value_t value) {
  bool on = value.bool_value;  cha_switch2_on.value.bool_value = on; //sync the value
  LOG_D("Switch: %s", on ? "ON" : "OFF");
  digitalWrite(Y2, on ? HIGH : LOW);
}

//Called when the switch value is changed by iOS Home APP
void cha_switch3_on_setter(const homekit_value_t value) {
  bool on = value.bool_value;
  cha_switch3_on.value.bool_value = on; //sync the value
  LOG_D("Switch: %s", on ? "ON" : "OFF");
  digitalWrite(Y3, on ? HIGH : LOW);
}

//Called when the switch value is changed by iOS Home APP
void cha_switch4_on_setter(const homekit_value_t value) {
  bool on = value.bool_value;
  cha_switch4_on.value.bool_value = on; //sync the value
  LOG_D("Switch: %s", on ? "ON" : "OFF");
  digitalWrite(Y4, on ? HIGH : LOW);
}


void my_homekit_setup() {
  pinMode(X1, INPUT);
	pinMode(Y1, OUTPUT);
 
  pinMode(X2, INPUT);
  pinMode(Y2, OUTPUT);

  pinMode(X3, INPUT);
  pinMode(Y3, OUTPUT);

  pinMode(X4, INPUT);
  pinMode(Y4, OUTPUT);
  
	//digitalWrite(PIN_SWITCH, HIGH);

	//Add the .setter function to get the switch-event sent from iOS Home APP.
	//The .setter should be added before arduino_homekit_setup.
	//HomeKit sever uses the .setter_ex internally, see homekit_accessories_init function.
	//Maybe this is a legacy design issue in the original esp-homekit library,
	//and I have no reason to modify this "feature".
	cha_switch1_on.setter = cha_switch1_on_setter;
  cha_switch2_on.setter = cha_switch2_on_setter;
  cha_switch3_on.setter = cha_switch3_on_setter;
  cha_switch4_on.setter = cha_switch4_on_setter;
  
	arduino_homekit_setup(&config);

	//report the switch value to HomeKit if it is changed (e.g. by a physical button)
	//bool switch_is_on = true/false;
	//cha_switch_on.value.bool_value = switch_is_on;
	//homekit_characteristic_notify(&cha_switch_on, cha_switch_on.value);
}

void my_homekit_loop() {
	arduino_homekit_loop();
  switch_feedback_function();
	const uint32_t t = millis();
	if (t > next_heap_millis) {
		// show heap info every 5 seconds
		next_heap_millis = t + 5 * 1000;
		LOG_D("Free heap: %d, HomeKit clients: %d",
				ESP.getFreeHeap(), arduino_homekit_connected_clients_count());

	}
}

void switch_feedback_function(){
  if(digitalRead(X1) == HIGH){
    if(switch_ON_Flag1_previonus_I == 0){
      digitalWrite(Y1, LOW);
      //report the switch value to HomeKit
      bool switch1_is_on = 0;
      cha_switch1_on.value.bool_value = switch1_is_on;
      homekit_characteristic_notify(&cha_switch1_on, cha_switch1_on.value);
      switch_ON_Flag1_previonus_I = 1;
    }
    if(DEBUG_SW) Serial.println("Switch1- ON");
  }
  if(digitalRead(X1) == LOW){
    if(switch_ON_Flag1_previonus_I == 1){
      digitalWrite(Y1, HIGH);
      //report the switch value to HomeKit
      bool switch1_is_on = 1;
      cha_switch1_on.value.bool_value = switch1_is_on;
      homekit_characteristic_notify(&cha_switch1_on, cha_switch1_on.value);
      switch_ON_Flag1_previonus_I = 0;
    }
    if(DEBUG_SW) Serial.println("Switch1 OFF");
  }

  if(digitalRead(X2) == HIGH){
    if(switch_ON_Flag2_previonus_I == 0){
      digitalWrite(Y2, LOW);
      //report the switch value to HomeKit
      bool switch2_is_on = 0;
      cha_switch2_on.value.bool_value = switch2_is_on;
      homekit_characteristic_notify(&cha_switch2_on, cha_switch2_on.value);
      switch_ON_Flag2_previonus_I = 1;
    }
    if(DEBUG_SW) Serial.println("Switch2- ON");
  }
  if(digitalRead(X2) == LOW){
    if(switch_ON_Flag2_previonus_I == 1){
      digitalWrite(Y2, HIGH);
      //report the switch value to HomeKit
      bool switch2_is_on = 1;
      cha_switch2_on.value.bool_value = switch2_is_on;
      homekit_characteristic_notify(&cha_switch2_on, cha_switch2_on.value);
      switch_ON_Flag2_previonus_I = 0;
    }
    if(DEBUG_SW) Serial.println("Switch2 OFF");
  }

  if(digitalRead(X3) == HIGH){
    if(switch_ON_Flag3_previonus_I == 0){
      digitalWrite(Y3, LOW);
      //report the switch value to HomeKit
      bool switch3_is_on = 0;
      cha_switch3_on.value.bool_value = switch3_is_on;
      homekit_characteristic_notify(&cha_switch3_on, cha_switch3_on.value);
      switch_ON_Flag3_previonus_I = 1;
    }
    if(DEBUG_SW) Serial.println("Switch3- ON");
  }
  if(digitalRead(X3) == LOW){
    if(switch_ON_Flag3_previonus_I == 1){
      digitalWrite(Y3, HIGH);
      //report the switch value to HomeKit
      bool switch3_is_on = 1;
      cha_switch3_on.value.bool_value = switch3_is_on;
      homekit_characteristic_notify(&cha_switch3_on, cha_switch3_on.value);
      switch_ON_Flag3_previonus_I = 0;
    }
    if(DEBUG_SW) Serial.println("Switch3 OFF");
  }

  if(digitalRead(X4) == HIGH){
    if(switch_ON_Flag4_previonus_I == 0){
      digitalWrite(Y4, LOW);
      //report the switch value to HomeKit
      bool switch4_is_on = 0;
      cha_switch4_on.value.bool_value = switch4_is_on;
      homekit_characteristic_notify(&cha_switch4_on, cha_switch4_on.value);
      switch_ON_Flag4_previonus_I = 1;
    }
    if(DEBUG_SW) Serial.println("Switch4- ON");
  }
  if(digitalRead(X4) == LOW){
    if(switch_ON_Flag4_previonus_I == 1){
      digitalWrite(Y4, HIGH);
      //report the switch value to HomeKit
      bool switch4_is_on = 1;
      cha_switch4_on.value.bool_value = switch4_is_on;
      homekit_characteristic_notify(&cha_switch4_on, cha_switch4_on.value);
      switch_ON_Flag4_previonus_I = 0;
    }
    if(DEBUG_SW) Serial.println("Switch4 OFF");
  }
  
}



//******************************************************//
                    my_accessory.c
//******************************************************//

#include <homekit/homekit.h>
#include <homekit/characteristics.h>

void my_accessory_identify(homekit_value_t _value) {
	printf("accessory identify\n");
}

// Switch (HAP section 8.38)
// required: ON
// optional: NAME

// format: bool; HAP section 9.70; write the .setter function to get the switch-event sent from iOS Home APP.
homekit_characteristic_t cha_switch1_on = HOMEKIT_CHARACTERISTIC_(ON, false);
homekit_characteristic_t cha_switch2_on = HOMEKIT_CHARACTERISTIC_(ON, false);
homekit_characteristic_t cha_switch3_on = HOMEKIT_CHARACTERISTIC_(ON, false);
homekit_characteristic_t cha_switch4_on = HOMEKIT_CHARACTERISTIC_(ON, false);

// format: string; HAP section 9.62; max length 64
homekit_characteristic_t cha_name = HOMEKIT_CHARACTERISTIC_(NAME, "Home Switch 4 ch");

homekit_accessory_t *accessories[] = {
    HOMEKIT_ACCESSORY(.id=1, .category=homekit_accessory_category_switch, .services=(homekit_service_t*[]) {
        HOMEKIT_SERVICE(ACCESSORY_INFORMATION, .characteristics=(homekit_characteristic_t*[]) {
            HOMEKIT_CHARACTERISTIC(NAME, "Switch"),
            HOMEKIT_CHARACTERISTIC(MANUFACTURER, "Switch1"),
            HOMEKIT_CHARACTERISTIC(SERIAL_NUMBER, "0123456"),
            HOMEKIT_CHARACTERISTIC(MODEL, "Home_V1"),
            HOMEKIT_CHARACTERISTIC(FIRMWARE_REVISION, "1.0"),
            HOMEKIT_CHARACTERISTIC(IDENTIFY, my_accessory_identify),
            NULL
        }),
		HOMEKIT_SERVICE(SWITCH, .primary=true, .characteristics=(homekit_characteristic_t*[]){
			&cha_switch1_on,
			&cha_name,
			NULL
		}),
        NULL
    }),


    HOMEKIT_ACCESSORY(.id=2, .category=homekit_accessory_category_switch, .services=(homekit_service_t*[]) {
        HOMEKIT_SERVICE(ACCESSORY_INFORMATION, .characteristics=(homekit_characteristic_t*[]) {
            HOMEKIT_CHARACTERISTIC(NAME, "Switch"),
            HOMEKIT_CHARACTERISTIC(MANUFACTURER, "Switch2"),
            HOMEKIT_CHARACTERISTIC(SERIAL_NUMBER, "0123456"),
            HOMEKIT_CHARACTERISTIC(MODEL, "Home_V1"),
            HOMEKIT_CHARACTERISTIC(FIRMWARE_REVISION, "1.0"),
            HOMEKIT_CHARACTERISTIC(IDENTIFY, my_accessory_identify),
            NULL
        }),
    HOMEKIT_SERVICE(SWITCH, .primary=true, .characteristics=(homekit_characteristic_t*[]){
      &cha_switch2_on,
      &cha_name,
      NULL
    }),
        NULL
    }),


    HOMEKIT_ACCESSORY(.id=3, .category=homekit_accessory_category_switch, .services=(homekit_service_t*[]) {
        HOMEKIT_SERVICE(ACCESSORY_INFORMATION, .characteristics=(homekit_characteristic_t*[]) {
            HOMEKIT_CHARACTERISTIC(NAME, "Switch"),
            HOMEKIT_CHARACTERISTIC(MANUFACTURER, "Switch3"),
            HOMEKIT_CHARACTERISTIC(SERIAL_NUMBER, "0123456"),
            HOMEKIT_CHARACTERISTIC(MODEL, "Home_V1"),
            HOMEKIT_CHARACTERISTIC(FIRMWARE_REVISION, "1.0"),
            HOMEKIT_CHARACTERISTIC(IDENTIFY, my_accessory_identify),
            NULL
        }),
    HOMEKIT_SERVICE(SWITCH, .primary=true, .characteristics=(homekit_characteristic_t*[]){
      &cha_switch3_on,
      &cha_name,
      NULL
    }),
        NULL
    }),


    HOMEKIT_ACCESSORY(.id=4, .category=homekit_accessory_category_switch, .services=(homekit_service_t*[]) {
        HOMEKIT_SERVICE(ACCESSORY_INFORMATION, .characteristics=(homekit_characteristic_t*[]) {
            HOMEKIT_CHARACTERISTIC(NAME, "Switch"),
            HOMEKIT_CHARACTERISTIC(MANUFACTURER, "Switch4"),
            HOMEKIT_CHARACTERISTIC(SERIAL_NUMBER, "0123456"),
            HOMEKIT_CHARACTERISTIC(MODEL, "Home_V1"),
            HOMEKIT_CHARACTERISTIC(FIRMWARE_REVISION, "1.0"),
            HOMEKIT_CHARACTERISTIC(IDENTIFY, my_accessory_identify),
            NULL
        }),
    HOMEKIT_SERVICE(SWITCH, .primary=true, .characteristics=(homekit_characteristic_t*[]){
      &cha_switch4_on,
      &cha_name,
      NULL
    }),
        NULL
    }),
    
    NULL
};

homekit_server_config_t config = {
		.accessories = accessories,
		.password = "111-11-111"
};





